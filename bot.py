import os
import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
from db_manager import DatabaseManager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞)
class Form(StatesGroup):
    city = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    add_channel = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    add_keyword = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    add_city = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    delete_channel = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    delete_keyword = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    search = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id=None):
    is_admin = False
    if user_id:
        user = db.get_user(user_id)
        is_admin = user and user['is_admin'] == 1
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('üåÜ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'))
    keyboard.add(KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    
    if is_admin:
        keyboard.add(KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'))
        keyboard.add(KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'))
        keyboard.add(KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥'))
        keyboard.add(KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª'))
        keyboard.add(KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'))
    
    keyboard.add(KeyboardButton('üîç –ü–æ–∏—Å–∫'))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        db.add_user(user_id)
        user = db.get_user(user_id)
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∏–¥–æ–∫ –∏ –∞–∫—Ü–∏–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤.",
        reply_markup=get_main_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    admin_password = os.getenv('ADMIN_PASSWORD', 'admin123')  # –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    command_parts = message.text.split()
    
    if len(command_parts) != 2 or command_parts[1] != admin_password:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        return
    
    user_id = message.from_user.id
    db.set_admin_status(user_id, 1)
    
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=get_main_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(Text(equals='üåÜ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'))
async def choose_city(message: types.Message):
    cities = db.get_all_cities()
    
    if not cities:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥–∞.")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for city in cities:
        keyboard.add(InlineKeyboardButton(city['name'], callback_data=f"city_{city['id']}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    await Form.city.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('city_'), state=Form.city)
async def process_city_choice(callback_query: types.CallbackQuery, state: FSMContext):
    city_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    
    db.update_user_city(user_id, city_id)
    
    city = next((c for c in db.get_all_cities() if c['id'] == city_id), None)
    city_name = city['name'] if city else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        user_id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city_name}. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞."
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(Text(equals='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user or not user['city_id']:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")
        return
    
    channels = db.get_channels_by_city(user['city_id'])
    keywords = db.get_all_keywords()
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {user['city_name']}:\n\n"
    stats_text += f"üì¢ –ö–∞–Ω–∞–ª—ã ({len(channels)}):\n"
    
    for i, channel in enumerate(channels[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∫–∞–Ω–∞–ª–æ–≤
        stats_text += f"{i}. {channel['channel_name']} (@{channel['channel_username']})\n"
    
    if len(channels) > 10:
        stats_text += f"... –∏ –µ—â–µ {len(channels) - 10} –∫–∞–Ω–∞–ª–æ–≤\n"
    
    stats_text += f"\nüîé –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ({len(keywords)}):\n"
    keywords_str = ", ".join([k['word'] for k in keywords[:20]])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Å–ª–æ–≤
    
    if len(keywords) > 20:
        stats_text += f"{keywords_str}... –∏ –µ—â–µ {len(keywords) - 20} —Å–ª–æ–≤"
    else:
        stats_text += keywords_str
    
    await message.answer(stats_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(Text(equals='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'))
async def add_channel_start(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user or user['is_admin'] != 1:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –µ–≥–æ –∏–º—è –∏ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<ID –∫–∞–Ω–∞–ª–∞> | <–ò–º—è –∫–∞–Ω–∞–ª–∞> | <Username –∫–∞–Ω–∞–ª–∞> | <ID –≥–æ—Ä–æ–¥–∞>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890 | –°–∫–∏–¥–∫–∏ –ú–æ—Å–∫–≤–∞ | moscow_sales | 1"
    )
    
    await Form.add_channel.set()

@dp.message_handler(state=Form.add_channel)
async def add_channel_process(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split('|')
        if len(parts) != 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        channel_id = parts[0].strip()
        channel_name = parts[1].strip()
        channel_username = parts[2].strip()
        city_id = int(parts[3].strip())
        
        result = db.add_channel(channel_id, channel_name, channel_username, city_id)
        
        if result:
            await message.answer(f"–ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(Text(equals='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'))
async def add_keyword_start(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user or user['is_admin'] != 1:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:")
    await Form.add_keyword.set()

@dp.message_handler(state=Form.add_keyword)
async def add_keyword_process(message: types.Message, state: FSMContext):
    keyword = message.text.strip().lower()
    
    if not keyword:
        await message.answer("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    result = db.add_keyword(keyword)
    
    if result:
        await message.answer(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(Text(equals='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥'))
async def add_city_start(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user or user['is_admin'] != 1:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await Form.add_city.set()

@dp.message_handler(state=Form.add_city)
async def add_city_process(message: types.Message, state: FSMContext):
    city_name = message.text.strip()
    
    if not city_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    result = db.add_city(city_name)
    
    if result:
        await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(Text(equals='‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª'))
async def delete_channel_start(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user or user['is_admin'] != 1:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    channels = db.get_channels_by_city()
    
    if not channels:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for channel in channels:
        keyboard.add(InlineKeyboardButton(
            f"{channel['channel_name']} (@{channel['channel_username']})",
            callback_data=f"del_channel_{channel['channel_id']}"
        ))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await Form.delete_channel.set()

@dp.callback_query_handler(lambda c: c.data.startswith('del_channel_'), state=Form.delete_channel)
async def delete_channel_process(callback_query: types.CallbackQuery, state: FSMContext):
    channel_id = callback_query.data.split('_')[2]
    
    db.delete_channel(channel_id)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(Text(equals='‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'))
async def delete_keyword_start(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user or user['is_admin'] != 1:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    keywords = db.get_all_keywords(active_only=False)
    
    if not keywords:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for keyword in keywords:
        keyboard.add(InlineKeyboardButton(
            keyword['word'],
            callback_data=f"del_keyword_{keyword['id']}"
        ))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await Form.delete_keyword.set()

@dp.callback_query_handler(lambda c: c.data.startswith('del_keyword_'), state=Form.delete_keyword)
async def delete_keyword_process(callback_query: types.CallbackQuery, state: FSMContext):
    keyword_id = int(callback_query.data.split('_')[2])
    
    db.delete_keyword(keyword_id)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(Text(equals='üîç –ü–æ–∏—Å–∫'))
async def search_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await Form.search.set()

@dp.message_handler(state=Form.search)
async def search_process(message: types.Message, state: FSMContext):
    # –í –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –µ—Å—Ç—å
    await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) 