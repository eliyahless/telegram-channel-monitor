#!/usr/bin/env python3
import asyncio
import logging
import os
import getpass
import time

from aiogram import Bot
from telethon import TelegramClient
from telethon.sessions import StringSession

from config import settings
from parser.monitor import parse_channel
from bot.sender import send_messages_to_user

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ 
SESSION_STRING = "1ApWapzMBu6Zq7nPE5zXTdcTQon7fEu56EKrrStsgg3qabnrmpBAPmHTXBK9SeKhPiNNZDKQ-Awtby52bdNtG-0-pEOPqW4en1Vm3FMDc-K7iyTLHFSPydmh9AxUF5PXbopH4EdpWJiXr9lWjTPdbboZHEkAGKBOnmxeVnsqrCtxLHL9vRfAMktTci-LLoaWNeq9YRWcWk0t1mGsYKZua5uBWO4EQ7gFJJ_H_N34da5Yyp0XN7uu6FwOhZpVSUCBl9jySBoxSwfEo3kVkLs75wlJ5ofLtKNvKQitmU4IIzTZOeq-5U3fWRRLUneqcqqMcGusSvkDbosdHcMbyjUcTeKYepVFnwp4="

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ --- #
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    telethon_client = TelegramClient(StringSession(SESSION_STRING), settings.API_ID, settings.API_HASH)
    bot = Bot(token=settings.BOT_TOKEN)

    try:
        # --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telethon --- #
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram (Telethon) —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è 2FA (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ—á–µ—Ç)
        async def password_callback():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º getpass –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            return getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA: ")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        await telethon_client.connect()
        
        # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not await telethon_client.is_user_authorized():
            logging.info("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            await telethon_client.start(
                phone=lambda: input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567): '),
                password=password_callback
            )
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
            if await telethon_client.is_user_authorized():
                new_session_string = telethon_client.session.save()
                logging.info(f"–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏: {new_session_string}")
                logging.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–∂–µ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        me = await telethon_client.get_me()
        logging.info(f"Telethon —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (ID: {me.id}).")

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
        await send_last_message(telethon_client, bot)

        # --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫) --- #
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞...")
        new_filtered_messages = await parse_channel(telethon_client)

        if new_filtered_messages:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_filtered_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤–∫–∞...")
            await send_messages_to_user(bot, new_filtered_messages)
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            logging.info("–ù–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    finally:
        # --- –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π --- #
        if telethon_client.is_connected():
            await telethon_client.disconnect()
            logging.info("Telethon –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ Aiogram
        if hasattr(bot, 'session') and bot.session:
            await bot.session.close()
            logging.info("–°–µ—Å—Å–∏—è Aiogram –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

async def send_last_message(client: TelegramClient, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    try:
        start_time = time.time()
        logging.info("–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞...")
        await bot.send_message(settings.USER_ID, "üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É... –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        
        entity = await client.get_entity('@afisharestaurants')
        messages = await client.get_messages(entity, limit=1)
        
        if messages and len(messages) > 0:
            message = messages[0]
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id} (–∑–∞–Ω—è–ª–æ {time.time() - start_time:.2f} —Å–µ–∫)")
            await bot.send_message(settings.USER_ID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_link = f"https://t.me/afisharestaurants/{message.id}"
            message_text = message.text if hasattr(message, 'text') and message.text else ''
            message_caption = message.caption if hasattr(message, 'caption') and message.caption else ''
            full_text = message_text or message_caption or '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç'
            
            text_to_send = f"–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï\n\n{full_text}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {message_link}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            media_start = time.time()
            await bot.send_message(settings.USER_ID, text_to_send)
            logging.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∑–∞–Ω—è–ª–æ {time.time() - media_start:.2f} —Å–µ–∫)")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            if message.media:
                await bot.send_message(settings.USER_ID, "‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. –ó–∞–≥—Ä—É–∂–∞—é... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)")
                logging.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º...")
                try:
                    media_start = time.time()
                    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
                    await bot.send_message(settings.USER_ID, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –º–µ–¥–∏–∞—Ñ–∞–π–ª...")
                    media_file = await message.download_media(file=bytes)
                    logging.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω (–∑–∞–Ω—è–ª–æ {time.time() - media_start:.2f} —Å–µ–∫)")
                    
                    await bot.send_message(settings.USER_ID, "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –º–µ–¥–∏–∞—Ñ–∞–π–ª...")
                    send_start = time.time()
                    if message.photo:
                        await bot.send_photo(
                            chat_id=settings.USER_ID,
                            photo=media_file,
                            caption="–§–æ—Ç–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ @afisharestaurants"
                        )
                    elif message.video:
                        await bot.send_video(
                            chat_id=settings.USER_ID,
                            video=media_file,
                            caption="–í–∏–¥–µ–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ @afisharestaurants"
                        )
                    logging.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∑–∞–Ω—è–ª–æ {time.time() - send_start:.2f} —Å–µ–∫)")
                    await bot.send_message(settings.USER_ID, "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
                    await bot.send_message(settings.USER_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {str(e)[:100]}...")
            
            total_time = time.time() - start_time
            logging.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–æ–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫)")
            await bot.send_message(settings.USER_ID, f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫")
        else:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞")
            await bot.send_message(settings.USER_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ @afisharestaurants")
            
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await bot.send_message(settings.USER_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)[:100]}...")
        except:
            pass

if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º loop.run_until_complete –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥–∞—Ö
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞
        tasks = asyncio.all_tasks(loop)
        for task in tasks:
            task.cancel()
        group = asyncio.gather(*tasks, return_exceptions=True)
        loop.run_until_complete(group)
        loop.close()
        logging.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π asyncio –∑–∞–∫—Ä—ã—Ç.") 