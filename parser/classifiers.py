from typing import List, Set, Dict
import re
from dataclasses import dataclass

@dataclass
class TagRule:
    """–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–≥–∞"""
    keywords: List[str]
    emoji: str

# –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
TAG_RULES: Dict[str, TagRule] = {
    "—Å–∫–∏–¥–∫–∞": TagRule(
        keywords=["—Å–∫–∏–¥–∫", "–∞–∫—Ü–∏—è", "%", "–¥–µ—à–µ–≤–ª–µ", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "—Å–ø–µ—Ü", "—Ü–µ–Ω–∞"],
        emoji="üí∞"
    ),
    "–ø–æ–¥–∞—Ä–æ–∫": TagRule(
        keywords=["–≤ –ø–æ–¥–∞—Ä–æ–∫", "–ø–æ–¥–∞—Ä–æ–∫", "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"],
        emoji="üéÅ"
    ),
    "—à–µ—Ñ": TagRule(
        keywords=["—à–µ—Ñ", "–∞–≤—Ç–æ—Ä—Å–∫–æ–µ", "—Å–µ—Ç", "–¥–µ–≥—É—Å—Ç–∞—Ü–∏—è", "tasting", "chef"],
        emoji="üë®‚Äçüç≥"
    ),
    "—Ñ–µ—Å—Ç–∏–≤–∞–ª—å": TagRule(
        keywords=["—Ñ–µ—Å—Ç–∏–≤–∞–ª—å", "–∏–≤–µ–Ω—Ç", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "—Å–æ–±—ã—Ç–∏–µ", "fest"],
        emoji="üéâ"
    ),
    "–∑–∞–≤—Ç—Ä–∞–∫": TagRule(
        keywords=["–∑–∞–≤—Ç—Ä–∞–∫", "—É—Ç—Ä–æ", "–∫–∞—à–∞", "–∫–æ—Ñ–µ", "breakfast"],
        emoji="üç≥"
    ),
    "–±—Ä–∞–Ω—á": TagRule(
        keywords=["–±—Ä–∞–Ω—á", "brunch", "–ø–æ–∑–¥–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫"],
        emoji="ü•ê"
    ),
    "–±–∞—Ä": TagRule(
        keywords=["–±–∞—Ä", "–∫–æ–∫—Ç–µ–π–ª—å", "–≤–∏–Ω–æ", "–ø–∏–≤–æ", "–∞–ª–∫–æ–≥–æ–ª—å"],
        emoji="üç∏"
    ),
    "–∞–∑–∏—è": TagRule(
        keywords=["—Å—É—à–∏", "—Ä–æ–ª–ª—ã", "–≤–æ–∫", "—Ä–∞–º–µ–Ω", "–∞–∑–∏–∞—Ç—Å–∫–∏–π"],
        emoji="üçú"
    ),
    "–ø–∏—Ü—Ü–∞": TagRule(
        keywords=["–ø–∏—Ü—Ü–∞", "pizza", "–ø–∏—Ü—Ü–µ—Ä–∏—è"],
        emoji="üçï"
    ),
    "–≤–µ–≥–∞–Ω": TagRule(
        keywords=["–≤–µ–≥–∞–Ω", "vegan", "—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", "–±–µ–∑ –º—è—Å–∞"],
        emoji="ü•ó"
    ),
}

def normalize_text(text: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    """
    text = text.lower()
    text = re.sub(r'[^\w\s]', ' ', text)
    return text

def find_tags(text: str) -> Set[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        Set[str]: –ù–∞–±–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    """
    normalized_text = normalize_text(text)
    found_tags = set()
    
    for tag, rule in TAG_RULES.items():
        if any(keyword.lower() in normalized_text for keyword in rule.keywords):
            found_tags.add(tag)
    
    return found_tags

def is_hot_content(tags: List[str]) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ä—è—á–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤.
    
    –ö–æ–Ω—Ç–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–æ—Ä—è—á–∏–º –µ—Å–ª–∏:
    1. –ï—Å—Ç—å —Ç–µ–≥ "—Å–∫–∏–¥–∫–∞" –∏–ª–∏ "–ø–æ–¥–∞—Ä–æ–∫" –ò
    2. –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –¥—Ä—É–≥–∏—Ö —Ç–µ–≥–∞
    
    Args:
        tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ä—è—á–∏–π, False –∏–Ω–∞—á–µ
    """
    if len(tags) < 2:
        return False
        
    has_promo = "—Å–∫–∏–¥–∫–∞" in tags or "–ø–æ–¥–∞—Ä–æ–∫" in tags
    other_tags = [tag for tag in tags if tag not in ["—Å–∫–∏–¥–∫–∞", "–ø–æ–¥–∞—Ä–æ–∫"]]
    
    return has_promo and len(other_tags) >= 2

def extract_price(text: str) -> List[int]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        List[int]: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–µ–Ω
    """
    price_patterns = [
        r'(\d+)\s*‚ÇΩ',
        r'(\d+)\s*—Ä—É–±',
        r'(\d+)\s*—Ä\b',
        r'(\d+)\s*rub',
    ]
    
    prices = []
    for pattern in price_patterns:
        matches = re.finditer(pattern, text, re.IGNORECASE)
        prices.extend(int(match.group(1)) for match in matches)
    
    return sorted(prices) if prices else [] 